# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2023 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from connect.mica.connect.instrument.v1 import instrument_pb2 as mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2
from connect.mica.connect.service.v1 import connect_service_pb2 as mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2
from connect.mica.connect.serviceprovider.v1 import service_provider_pb2 as mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2
from connect.micashared.common.ping.v1 import ping_pb2 as micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2


class ConnectServiceStub(object):
    """The Connect Service implements both Legacy Connect and Connect. It is used to enroll user's financial accounts on the
    Mica network.
    <editor-fold desc="Service Provider Operations">
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchServiceProvider = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/SearchServiceProvider',
                request_serializer=mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.SerializeToString,
                response_deserializer=mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.FromString,
                )
        self.WidgetRegisterInstrumentWithVerificationCode = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentWithVerificationCode',
                request_serializer=mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeRequest.SerializeToString,
                response_deserializer=mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeResponse.FromString,
                )
        self.WidgetRegisterInstrumentInitiate = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate',
                request_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.SerializeToString,
                response_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.FromString,
                )
        self.WidgetRegisterInstrumentWithAccount = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount',
                request_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.SerializeToString,
                response_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.FromString,
                )
        self.WidgetRegisterInstrumentComplete = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete',
                request_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.SerializeToString,
                response_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/mica.connect.service.v1.ConnectService/Ping',
                request_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
                response_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
                )


class ConnectServiceServicer(object):
    """The Connect Service implements both Legacy Connect and Connect. It is used to enroll user's financial accounts on the
    Mica network.
    <editor-fold desc="Service Provider Operations">
    """

    def SearchServiceProvider(self, request, context):
        """Find Service Providers that match a given name. This includes pagination. Called by the mica Widget to populate
        the list of Service Providers the user can choose from. Called from Widget.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentWithVerificationCode(self, request, context):
        """<editor-fold desc="Instrument Operations">

        Initiate an enrollemt where the user has already obtained a verification code  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentInitiate(self, request, context):
        """Following the call from Partner to InitializeWidget, this call is the first one that the Widget makes after the
        user has provided the necessary details to determine their identity. It returns a list of instruments that the
        user has. Called from Widget.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentWithAccount(self, request, context):
        """In cases where the user has more than on instrument with a given Service Provider this call is needed to identify
        which one the user wants to enroll. Called from Widget. Optional call required when user uses username/password
        and they have more than one account at the service provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentComplete(self, request, context):
        """The final call the Widget makes for either the mica Matching Code. Called from Widget.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """<editor-fold desc="Admin Operations">

        An operation to ping the server to ensure it's up and running and that the connection is good.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchServiceProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchServiceProvider,
                    request_deserializer=mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.FromString,
                    response_serializer=mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentWithVerificationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentWithVerificationCode,
                    request_deserializer=mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeRequest.FromString,
                    response_serializer=mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentInitiate': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentInitiate,
                    request_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.FromString,
                    response_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentWithAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentWithAccount,
                    request_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.FromString,
                    response_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentComplete,
                    request_deserializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.FromString,
                    response_serializer=mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.FromString,
                    response_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.connect.service.v1.ConnectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectService(object):
    """The Connect Service implements both Legacy Connect and Connect. It is used to enroll user's financial accounts on the
    Mica network.
    <editor-fold desc="Service Provider Operations">
    """

    @staticmethod
    def SearchServiceProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/SearchServiceProvider',
            mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.SerializeToString,
            mica_dot_connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentWithVerificationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentWithVerificationCode',
            mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeRequest.SerializeToString,
            mica_dot_connect_dot_service_dot_v1_dot_connect__service__pb2.WidgetRegisterInstrumentWithVerificationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentInitiate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate',
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.SerializeToString,
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentWithAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount',
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.SerializeToString,
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete',
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.SerializeToString,
            mica_dot_connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.connect.service.v1.ConnectService/Ping',
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
