# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from serviceprovider.mica.serviceprovider.instrument.v1 import instrument_pb2 as mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2
from serviceprovider.mica.serviceprovider.user.v1 import user_pb2 as mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2
from serviceprovider.mica.serviceprovider.value.v1 import value_pb2 as mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2
from serviceprovider.micashared.common.ping.v1 import ping_pb2 as micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2


class ServiceProviderFromMicaServiceStub(object):
    """The operations in this service are called by mica to facilitate the user enrollment process
    at a Partner, to process transactions and optionally to retrieve a list of Users
    transactions. With the exception of RetrieveTransactions all the other operations are
    required.
    The two Value operations, Obtain and Return, have basically the same structure and content.
    They primarily differ in the status codes they return. The main Value type includes information
    about the instrument being used, the amount of the transaction (requested and total amounts),
    the currency, the organization and store the transaction occurred in and optionally a list of
    items the user is purchasing or returning.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnrollUserInstrument = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/EnrollUserInstrument',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.FromString,
                )
        self.RetrieveTransaction = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/RetrieveTransaction',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionResponse.FromString,
                )
        self.ObtainValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ObtainValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueResponse.FromString,
                )
        self.ReverseObtainValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReverseObtainValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.FromString,
                )
        self.ReturnValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReturnValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueResponse.FromString,
                )
        self.ReverseReturnValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReverseReturnValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.FromString,
                )
        self.HoldValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/HoldValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueResponse.FromString,
                )
        self.ReleaseHoldValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReleaseHoldValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueResponse.FromString,
                )
        self.ObtainHoldValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ObtainHoldValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueResponse.FromString,
                )
        self.ReceiveValue = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReceiveValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.FromString,
                )
        self.ValueAdvice = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/ValueAdvice',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/mica.sdk.service.v1.ServiceProviderFromMicaService/Ping',
                request_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
                response_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
                )


class ServiceProviderFromMicaServiceServicer(object):
    """The operations in this service are called by mica to facilitate the user enrollment process
    at a Partner, to process transactions and optionally to retrieve a list of Users
    transactions. With the exception of RetrieveTransactions all the other operations are
    required.
    The two Value operations, Obtain and Return, have basically the same structure and content.
    They primarily differ in the status codes they return. The main Value type includes information
    about the instrument being used, the amount of the transaction (requested and total amounts),
    the currency, the organization and store the transaction occurred in and optionally a list of
    items the user is purchasing or returning.
    """

    def EnrollUserInstrument(self, request, context):
        """When a User initiates an enrollment at a Partner, mica will call this operation in order to
        pass the SP the matching code. The SP will then send the matching code to their User through
        whatever channel they already use to message their users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveTransaction(self, request, context):
        """Operation that can be used to retrieve a very simple transaction history for a given
        instrument and date range.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObtainValue(self, request, context):
        """<editor-fold desc="Value Operations">

        Operation to obtain value from a given instrument. Along with a common Value object (see
        above), it includes an approval type of either FULL or PARTIAL.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReverseObtainValue(self, request, context):
        """Reverse a ObtainValue transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnValue(self, request, context):
        """Operation to return value to a given instrument.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReverseReturnValue(self, request, context):
        """Reverse a ReturnValue transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HoldValue(self, request, context):
        """Hold a value for a given instrument to be used at a later time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseHoldValue(self, request, context):
        """Release a value that was previously held
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObtainHoldValue(self, request, context):
        """Obtain a value that was previously held
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValueAdvice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """<editor-fold desc="Admin Operations">

        An operation to ping the server to ensure it's up and running and that the connection is good.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceProviderFromMicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnrollUserInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrollUserInstrument,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.SerializeToString,
            ),
            'RetrieveTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveTransaction,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionResponse.SerializeToString,
            ),
            'ObtainValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ObtainValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueResponse.SerializeToString,
            ),
            'ReverseObtainValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReverseObtainValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.SerializeToString,
            ),
            'ReturnValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueResponse.SerializeToString,
            ),
            'ReverseReturnValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReverseReturnValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.SerializeToString,
            ),
            'HoldValue': grpc.unary_unary_rpc_method_handler(
                    servicer.HoldValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueResponse.SerializeToString,
            ),
            'ReleaseHoldValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseHoldValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueResponse.SerializeToString,
            ),
            'ObtainHoldValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ObtainHoldValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueResponse.SerializeToString,
            ),
            'ReceiveValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.SerializeToString,
            ),
            'ValueAdvice': grpc.unary_unary_rpc_method_handler(
                    servicer.ValueAdvice,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.FromString,
                    response_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.sdk.service.v1.ServiceProviderFromMicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceProviderFromMicaService(object):
    """The operations in this service are called by mica to facilitate the user enrollment process
    at a Partner, to process transactions and optionally to retrieve a list of Users
    transactions. With the exception of RetrieveTransactions all the other operations are
    required.
    The two Value operations, Obtain and Return, have basically the same structure and content.
    They primarily differ in the status codes they return. The main Value type includes information
    about the instrument being used, the amount of the transaction (requested and total amounts),
    the currency, the organization and store the transaction occurred in and optionally a list of
    items the user is purchasing or returning.
    """

    @staticmethod
    def EnrollUserInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/EnrollUserInstrument',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/RetrieveTransaction',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RetrieveTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObtainValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ObtainValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReverseObtainValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReverseObtainValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReturnValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReturnValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReverseReturnValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReverseReturnValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReverseValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HoldValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/HoldValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.HoldValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseHoldValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReleaseHoldValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReleaseHoldValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObtainHoldValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ObtainHoldValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ObtainHoldValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ReceiveValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValueAdvice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/ValueAdvice',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ValueAdviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.sdk.service.v1.ServiceProviderFromMicaService/Ping',
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
