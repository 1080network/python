# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from serviceprovider.mica.serviceprovider.instrument.v1 import instrument_pb2 as mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2
from serviceprovider.mica.serviceprovider.service.v1 import service_provider_to_mica_service_pb2 as mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2
from serviceprovider.mica.serviceprovider.serviceprovider.v1 import service_provider_pb2 as mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2
from serviceprovider.mica.serviceprovider.user.v1 import user_pb2 as mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2
from serviceprovider.mica.serviceprovider.uuek.v1 import uuek_pb2 as mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2
from serviceprovider.mica.serviceprovider.value.v1 import value_pb2 as mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2
from serviceprovider.micashared.common.v1 import receipt_pb2 as micashared_dot_common_dot_v1_dot_receipt__pb2


class ServiceProviderToMicaServiceStub(object):
    """The operations in this service allow the Service Provider to register their users and
    the user's instruments (accounts).  In addition there are operations to update, retrieve, search
    and delete those users and instruments. The SP can retrieve/search Organizations to retrieve
    information about them that is not passed via ValueObtain or ValueReturn. Finally the SP can
    provision it's own UUEKs which it can distribute to it's own users.
    The SP starts by authenticating themselves after which they can call the other operations in
    this service. At a minimum, the SP will need to call RegisterUser and RegisterInstrument for
    each user and instrument they want to make available for their users at mica. For both Users and
    Instruments the SP can retrieve, update and remove them.
    When mica calls the SP with either ValueObtain or ValueReturn mica will include the
    organizationKey and the specific category being used for this request. If the SP wants to get
    more information about the organization (e.g. name, all categories, and it's address) they can
    use the GetOrganization and SearchOrganization calls.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServiceProvider = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetServiceProvider',
                request_serializer=mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterUser',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserResponse.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetUser',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/UpdateUser',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserResponse.FromString,
                )
        self.RemoveUser = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveUser',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserResponse.FromString,
                )
        self.SearchUser = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchUser',
                request_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserResponse.FromString,
                )
        self.RegisterInstrument = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterInstrument',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentResponse.FromString,
                )
        self.GetInstrument = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrument',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentResponse.FromString,
                )
        self.RemoveInstrument = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrument',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentResponse.FromString,
                )
        self.SearchInstrument = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrument',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentResponse.FromString,
                )
        self.ProvisionServiceProviderUUEK = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionServiceProviderUUEK',
                request_serializer=mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKResponse.FromString,
                )
        self.ProvisionInstrumentLinkingCode = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionInstrumentLinkingCode',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeResponse.FromString,
                )
        self.CompleteLinkingWithCode = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/CompleteLinkingWithCode',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeResponse.FromString,
                )
        self.GetInstrumentLink = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrumentLink',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkResponse.FromString,
                )
        self.SearchInstrumentLinks = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrumentLinks',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksResponse.FromString,
                )
        self.RemoveInstrumentLink = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrumentLink',
                request_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkResponse.FromString,
                )
        self.GetValue = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueResponse.FromString,
                )
        self.GetReceipt = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetReceipt',
                request_serializer=micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptRequest.SerializeToString,
                response_deserializer=micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/Ping',
                request_serializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingResponse.FromString,
                )


class ServiceProviderToMicaServiceServicer(object):
    """The operations in this service allow the Service Provider to register their users and
    the user's instruments (accounts).  In addition there are operations to update, retrieve, search
    and delete those users and instruments. The SP can retrieve/search Organizations to retrieve
    information about them that is not passed via ValueObtain or ValueReturn. Finally the SP can
    provision it's own UUEKs which it can distribute to it's own users.
    The SP starts by authenticating themselves after which they can call the other operations in
    this service. At a minimum, the SP will need to call RegisterUser and RegisterInstrument for
    each user and instrument they want to make available for their users at mica. For both Users and
    Instruments the SP can retrieve, update and remove them.
    When mica calls the SP with either ValueObtain or ValueReturn mica will include the
    organizationKey and the specific category being used for this request. If the SP wants to get
    more information about the organization (e.g. name, all categories, and it's address) they can
    use the GetOrganization and SearchOrganization calls.
    """

    def GetServiceProvider(self, request, context):
        """Retrieves the details of the service provider record at Mica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Called when the Service Provider wants to register one of their users for Mica. Note that this does only the user and not the instrument (account).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Retrieve a user based on it's identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Update a user's demographic data held at Mica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """Remove a User from Mica. Typically called when a User ends their relationship with the issuer (e.g. closes their account).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchUser(self, request, context):
        """Searches for Users held at Mica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterInstrument(self, request, context):
        """Called to register a Users instrument (account) for use at Mica. This requires a user to already have been registered.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstrument(self, request, context):
        """Retrieve an instrument based on it's key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInstrument(self, request, context):
        """Remove an instrument from Mica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchInstrument(self, request, context):
        """Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvisionServiceProviderUUEK(self, request, context):
        """Used to create a UUEK that can be given to the Issuer's users in order to transact at Merchants (Partners) that support Mica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvisionInstrumentLinkingCode(self, request, context):
        """Initiates a linking process by returning a code based on the account owned by this user which will be linked to
        another member. This would typically be used by the user to establish a persistent payment method at a merchant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteLinkingWithCode(self, request, context):
        """If another member of the network initiated a link then this allows the link to be completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstrumentLink(self, request, context):
        """Retrieve a specific instrument link between two members.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchInstrumentLinks(self, request, context):
        """Search for instrument links.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInstrumentLink(self, request, context):
        """Remove a instrument link.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetValue(self, request, context):
        """Retrieve a given transaction based on the transaction identifier. This is used to retrieve the details of a
        transaction that has already occurred and is intended to be used in a pre-production environment. Mica aggressively
        purges transaction data from the operational data store within a short period of time and this call retrieves
        transactions from the operational data store.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReceipt(self, request, context):
        """Retrieve a receipt based on the transaction key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """An operation to ping the server to ensure it's up and running and that the connection is good.
        DEPRECATED. Please switch use cases to dedicated mica.member.ping.v1.PingService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceProviderToMicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServiceProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceProvider,
                    request_deserializer=mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserResponse.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserResponse.SerializeToString,
            ),
            'SearchUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchUser,
                    request_deserializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserResponse.SerializeToString,
            ),
            'RegisterInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterInstrument,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentResponse.SerializeToString,
            ),
            'GetInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstrument,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentResponse.SerializeToString,
            ),
            'RemoveInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInstrument,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentResponse.SerializeToString,
            ),
            'SearchInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchInstrument,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentResponse.SerializeToString,
            ),
            'ProvisionServiceProviderUUEK': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvisionServiceProviderUUEK,
                    request_deserializer=mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKResponse.SerializeToString,
            ),
            'ProvisionInstrumentLinkingCode': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvisionInstrumentLinkingCode,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeResponse.SerializeToString,
            ),
            'CompleteLinkingWithCode': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteLinkingWithCode,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeResponse.SerializeToString,
            ),
            'GetInstrumentLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstrumentLink,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkResponse.SerializeToString,
            ),
            'SearchInstrumentLinks': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchInstrumentLinks,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksResponse.SerializeToString,
            ),
            'RemoveInstrumentLink': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInstrumentLink,
                    request_deserializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkResponse.SerializeToString,
            ),
            'GetValue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueResponse.SerializeToString,
            ),
            'GetReceipt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReceipt,
                    request_deserializer=micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptRequest.FromString,
                    response_serializer=micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.serviceprovider.service.v1.ServiceProviderToMicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceProviderToMicaService(object):
    """The operations in this service allow the Service Provider to register their users and
    the user's instruments (accounts).  In addition there are operations to update, retrieve, search
    and delete those users and instruments. The SP can retrieve/search Organizations to retrieve
    information about them that is not passed via ValueObtain or ValueReturn. Finally the SP can
    provision it's own UUEKs which it can distribute to it's own users.
    The SP starts by authenticating themselves after which they can call the other operations in
    this service. At a minimum, the SP will need to call RegisterUser and RegisterInstrument for
    each user and instrument they want to make available for their users at mica. For both Users and
    Instruments the SP can retrieve, update and remove them.
    When mica calls the SP with either ValueObtain or ValueReturn mica will include the
    organizationKey and the specific category being used for this request. If the SP wants to get
    more information about the organization (e.g. name, all categories, and it's address) they can
    use the GetOrganization and SearchOrganization calls.
    """

    @staticmethod
    def GetServiceProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetServiceProvider',
            mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderRequest.SerializeToString,
            mica_dot_serviceprovider_dot_serviceprovider_dot_v1_dot_service__provider__pb2.GetServiceProviderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterUser',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetUser',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/UpdateUser',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveUser',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.RemoveUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchUser',
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserRequest.SerializeToString,
            mica_dot_serviceprovider_dot_user_dot_v1_dot_user__pb2.SearchUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterInstrument',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RegisterInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrument',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrument',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrument',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvisionServiceProviderUUEK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionServiceProviderUUEK',
            mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKRequest.SerializeToString,
            mica_dot_serviceprovider_dot_uuek_dot_v1_dot_uuek__pb2.ProvisionServiceProviderUUEKResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvisionInstrumentLinkingCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionInstrumentLinkingCode',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.ProvisionInstrumentLinkingCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteLinkingWithCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/CompleteLinkingWithCode',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.CompleteLinkingWithCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInstrumentLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrumentLink',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.GetInstrumentLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchInstrumentLinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrumentLinks',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.SearchInstrumentLinksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInstrumentLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrumentLink',
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkRequest.SerializeToString,
            mica_dot_serviceprovider_dot_instrument_dot_v1_dot_instrument__pb2.RemoveInstrumentLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.GetValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReceipt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetReceipt',
            micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptRequest.SerializeToString,
            micashared_dot_common_dot_v1_dot_receipt__pb2.GetReceiptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderToMicaService/Ping',
            mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingRequest.SerializeToString,
            mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__to__mica__service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
