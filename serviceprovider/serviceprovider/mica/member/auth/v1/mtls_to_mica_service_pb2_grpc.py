# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from serviceprovider.mica.member.auth.v1 import mtls_to_mica_service_pb2 as mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2


class MTLSToMicaServiceStub(object):
    """Service for managing mTLS certificates for members authenticating with Mica member APIs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateCertificate = channel.unary_unary(
                '/mica.member.auth.v1.MTLSToMicaService/GenerateCertificate',
                request_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateRequest.SerializeToString,
                response_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateResponse.FromString,
                )
        self.EnableCertificate = channel.unary_unary(
                '/mica.member.auth.v1.MTLSToMicaService/EnableCertificate',
                request_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateRequest.SerializeToString,
                response_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateResponse.FromString,
                )
        self.DisableCertificate = channel.unary_unary(
                '/mica.member.auth.v1.MTLSToMicaService/DisableCertificate',
                request_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateRequest.SerializeToString,
                response_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateResponse.FromString,
                )
        self.SearchCertificate = channel.unary_unary(
                '/mica.member.auth.v1.MTLSToMicaService/SearchCertificate',
                request_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateRequest.SerializeToString,
                response_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateResponse.FromString,
                )
        self.GetCertificate = channel.unary_unary(
                '/mica.member.auth.v1.MTLSToMicaService/GetCertificate',
                request_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateRequest.SerializeToString,
                response_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateResponse.FromString,
                )


class MTLSToMicaServiceServicer(object):
    """Service for managing mTLS certificates for members authenticating with Mica member APIs
    """

    def GenerateCertificate(self, request, context):
        """Generate a new mTLS certificate for authenticating calls to Mica member APIs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableCertificate(self, request, context):
        """Update the certificate with a given serial number, only supports enable/disable for now
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableCertificate(self, request, context):
        """do we need a separate Disable call?
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchCertificate(self, request, context):
        """Search for certificates and return the ones that match the criteria provided
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCertificate(self, request, context):
        """return a single certificate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MTLSToMicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateCertificate,
                    request_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateRequest.FromString,
                    response_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateResponse.SerializeToString,
            ),
            'EnableCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableCertificate,
                    request_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateRequest.FromString,
                    response_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateResponse.SerializeToString,
            ),
            'DisableCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableCertificate,
                    request_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateRequest.FromString,
                    response_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateResponse.SerializeToString,
            ),
            'SearchCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchCertificate,
                    request_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateRequest.FromString,
                    response_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateResponse.SerializeToString,
            ),
            'GetCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCertificate,
                    request_deserializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateRequest.FromString,
                    response_serializer=mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.member.auth.v1.MTLSToMicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MTLSToMicaService(object):
    """Service for managing mTLS certificates for members authenticating with Mica member APIs
    """

    @staticmethod
    def GenerateCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.member.auth.v1.MTLSToMicaService/GenerateCertificate',
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateRequest.SerializeToString,
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GenerateCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.member.auth.v1.MTLSToMicaService/EnableCertificate',
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateRequest.SerializeToString,
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.EnableCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.member.auth.v1.MTLSToMicaService/DisableCertificate',
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateRequest.SerializeToString,
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.DisableCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.member.auth.v1.MTLSToMicaService/SearchCertificate',
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateRequest.SerializeToString,
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.SearchCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.member.auth.v1.MTLSToMicaService/GetCertificate',
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateRequest.SerializeToString,
            mica_dot_member_dot_auth_dot_v1_dot_mtls__to__mica__service__pb2.GetCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
