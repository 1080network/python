# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mica.common.ping.v1 import ping_pb2 as common_dot_ping_dot_v1_dot_ping__pb2
from mica.connect.instrument.v1 import instrument_pb2 as connect_dot_instrument_dot_v1_dot_instrument__pb2
from mica.connect.serviceprovider.v1 import service_provider_pb2 as connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2
from mica.connect.staticdata.v1 import static_data_pb2 as connect_dot_staticdata_dot_v1_dot_static__data__pb2


class ConnectServiceStub(object):
    """Legacy Connect and Connect
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStaticData = channel.unary_unary(
                '/connect.service.v1.ConnectService/GetStaticData',
                request_serializer=connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataRequest.SerializeToString,
                response_deserializer=connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataResponse.FromString,
                )
        self.SearchServiceProvider = channel.unary_unary(
                '/connect.service.v1.ConnectService/SearchServiceProvider',
                request_serializer=connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.SerializeToString,
                response_deserializer=connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.FromString,
                )
        self.WidgetRegisterInstrumentInitiate = channel.unary_unary(
                '/connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate',
                request_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.SerializeToString,
                response_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.FromString,
                )
        self.WidgetRegisterInstrumentWithAccount = channel.unary_unary(
                '/connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount',
                request_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.SerializeToString,
                response_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.FromString,
                )
        self.WidgetRegisterInstrumentComplete = channel.unary_unary(
                '/connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete',
                request_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.SerializeToString,
                response_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.FromString,
                )
        self.WidgetRibbitRegisterInstrumentInitiate = channel.unary_unary(
                '/connect.service.v1.ConnectService/WidgetRibbitRegisterInstrumentInitiate',
                request_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateRequest.SerializeToString,
                response_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/connect.service.v1.ConnectService/Ping',
                request_serializer=common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
                response_deserializer=common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
                )


class ConnectServiceServicer(object):
    """Legacy Connect and Connect
    """

    def GetStaticData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchServiceProvider(self, request, context):
        """<editor-fold desc="SP Operations">

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentInitiate(self, request, context):
        """<editor-fold desc="Instrument Operations">

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentWithAccount(self, request, context):
        """optional call required when user uses username/password and they have more than one account at the service
        provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRegisterInstrumentComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WidgetRibbitRegisterInstrumentInitiate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """<editor-fold desc="Admin Operations">

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStaticData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStaticData,
                    request_deserializer=connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataRequest.FromString,
                    response_serializer=connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataResponse.SerializeToString,
            ),
            'SearchServiceProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchServiceProvider,
                    request_deserializer=connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.FromString,
                    response_serializer=connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentInitiate': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentInitiate,
                    request_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.FromString,
                    response_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentWithAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentWithAccount,
                    request_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.FromString,
                    response_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.SerializeToString,
            ),
            'WidgetRegisterInstrumentComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRegisterInstrumentComplete,
                    request_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.FromString,
                    response_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.SerializeToString,
            ),
            'WidgetRibbitRegisterInstrumentInitiate': grpc.unary_unary_rpc_method_handler(
                    servicer.WidgetRibbitRegisterInstrumentInitiate,
                    request_deserializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateRequest.FromString,
                    response_serializer=connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.FromString,
                    response_serializer=common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'connect.service.v1.ConnectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectService(object):
    """Legacy Connect and Connect
    """

    @staticmethod
    def GetStaticData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/GetStaticData',
            connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataRequest.SerializeToString,
            connect_dot_staticdata_dot_v1_dot_static__data__pb2.GetStaticDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchServiceProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/SearchServiceProvider',
            connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderRequest.SerializeToString,
            connect_dot_serviceprovider_dot_v1_dot_service__provider__pb2.SearchServiceProviderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentInitiate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate',
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateRequest.SerializeToString,
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentInitiateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentWithAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount',
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountRequest.SerializeToString,
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentWithAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRegisterInstrumentComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete',
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteRequest.SerializeToString,
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRegisterInstrumentCompleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WidgetRibbitRegisterInstrumentInitiate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/WidgetRibbitRegisterInstrumentInitiate',
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateRequest.SerializeToString,
            connect_dot_instrument_dot_v1_dot_instrument__pb2.WidgetRibbitRegisterInstrumentInitiateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connect.service.v1.ConnectService/Ping',
            common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
            common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
