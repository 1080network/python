# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sdk.mica.partner.service.v1 import partner_to_mica_wip_service_pb2 as mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2


class PartnerToMicaWIPServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRecurringPayment = channel.unary_unary(
                '/mica.partner.service.v1.PartnerToMicaWIPService/CreateRecurringPayment',
                request_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentRequest.SerializeToString,
                response_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentResponse.FromString,
                )
        self.GetRecurringPayment = channel.unary_unary(
                '/mica.partner.service.v1.PartnerToMicaWIPService/GetRecurringPayment',
                request_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentRequest.SerializeToString,
                response_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentResponse.FromString,
                )
        self.ProvisionRecurringPaymentUUEK = channel.unary_unary(
                '/mica.partner.service.v1.PartnerToMicaWIPService/ProvisionRecurringPaymentUUEK',
                request_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKRequest.SerializeToString,
                response_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKResponse.FromString,
                )


class PartnerToMicaWIPServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRecurringPayment(self, request, context):
        """Create a recurring payment to be attached to a partner to service provider link
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecurringPayment(self, request, context):
        """return a recurring payment using a unique identifier as a key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvisionRecurringPaymentUUEK(self, request, context):
        """The user should call this method before calling ExecuteRecurringPaymentObtainValue below
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PartnerToMicaWIPServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRecurringPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecurringPayment,
                    request_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentRequest.FromString,
                    response_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentResponse.SerializeToString,
            ),
            'GetRecurringPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecurringPayment,
                    request_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentRequest.FromString,
                    response_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentResponse.SerializeToString,
            ),
            'ProvisionRecurringPaymentUUEK': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvisionRecurringPaymentUUEK,
                    request_deserializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKRequest.FromString,
                    response_serializer=mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.partner.service.v1.PartnerToMicaWIPService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PartnerToMicaWIPService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRecurringPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.partner.service.v1.PartnerToMicaWIPService/CreateRecurringPayment',
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentRequest.SerializeToString,
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.CreateRecurringPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecurringPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.partner.service.v1.PartnerToMicaWIPService/GetRecurringPayment',
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentRequest.SerializeToString,
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.GetRecurringPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvisionRecurringPaymentUUEK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.partner.service.v1.PartnerToMicaWIPService/ProvisionRecurringPaymentUUEK',
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKRequest.SerializeToString,
            mica_dot_partner_dot_service_dot_v1_dot_partner__to__mica__wip__service__pb2.ProvisionRecurringPaymentUUEKResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
