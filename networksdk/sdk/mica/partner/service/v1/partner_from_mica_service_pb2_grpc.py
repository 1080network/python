# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sdk.mica.partner.user.v1 import user_pb2 as mica_dot_partner_dot_user_dot_v1_dot_user__pb2
from sdk.micashared.common.ping.v1 import ping_pb2 as micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2


class PartnerFromMicaServiceStub(object):
    """<editor-fold desc="User Instrument Operations">
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnrollUserInstrument = channel.unary_unary(
                '/mica.partner.service.v1.PartnerFromMicaService/EnrollUserInstrument',
                request_serializer=mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.SerializeToString,
                response_deserializer=mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/mica.partner.service.v1.PartnerFromMicaService/Ping',
                request_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
                response_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
                )


class PartnerFromMicaServiceServicer(object):
    """<editor-fold desc="User Instrument Operations">
    """

    def EnrollUserInstrument(self, request, context):
        """operation to support reverse onboarding. Instead of the Partner calling Mica, Mica will call the Partner with a
        new enrollment. For example, a User starting at the mica user website could sign up for Netflix assuming that
        Netflix supported mica and have implemented this API.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """<editor-fold desc="Admin Operations">

        An operation to ping the server to ensure it's up and running and that the connection is good.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PartnerFromMicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnrollUserInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrollUserInstrument,
                    request_deserializer=mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.FromString,
                    response_serializer=mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.FromString,
                    response_serializer=micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.partner.service.v1.PartnerFromMicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PartnerFromMicaService(object):
    """<editor-fold desc="User Instrument Operations">
    """

    @staticmethod
    def EnrollUserInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.partner.service.v1.PartnerFromMicaService/EnrollUserInstrument',
            mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentRequest.SerializeToString,
            mica_dot_partner_dot_user_dot_v1_dot_user__pb2.EnrollUserInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.partner.service.v1.PartnerFromMicaService/Ping',
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
            micashared_dot_common_dot_ping_dot_v1_dot_ping__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
