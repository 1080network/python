# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
#  Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
#  code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
#  other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
#  post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
#  valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
#  products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
#  permission.
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sdk.mica.serviceprovider.service.v1 import service_provider_from_mica_wip_service_pb2 as mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2
from sdk.mica.serviceprovider.value.v1 import value_pb2 as mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2


class ServiceProviderFromMicaWIPServiceStub(object):
    """Service for Work In Progress or experimental operations that may become a standard product feature in the future
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApproveChargeback = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ApproveChargeback',
                request_serializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackResponse.FromString,
                )
        self.ReceiveValue = channel.unary_unary(
                '/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ReceiveValue',
                request_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.SerializeToString,
                response_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.FromString,
                )


class ServiceProviderFromMicaWIPServiceServicer(object):
    """Service for Work In Progress or experimental operations that may become a standard product feature in the future
    """

    def ApproveChargeback(self, request, context):
        """This operation will only be used when a dispute is resolved in favor of the user _and_ the money is going back to
        the users instrument. If the dispute resulted in a replacement or an in-store credit, then the Service Provider
        is not called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceProviderFromMicaWIPServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApproveChargeback': grpc.unary_unary_rpc_method_handler(
                    servicer.ApproveChargeback,
                    request_deserializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackResponse.SerializeToString,
            ),
            'ReceiveValue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveValue,
                    request_deserializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.FromString,
                    response_serializer=mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceProviderFromMicaWIPService(object):
    """Service for Work In Progress or experimental operations that may become a standard product feature in the future
    """

    @staticmethod
    def ApproveChargeback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ApproveChargeback',
            mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackRequest.SerializeToString,
            mica_dot_serviceprovider_dot_service_dot_v1_dot_service__provider__from__mica__wip__service__pb2.ApproveChargebackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ReceiveValue',
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueRequest.SerializeToString,
            mica_dot_serviceprovider_dot_value_dot_v1_dot_value__pb2.ReceiveValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
